use arbitrary::Arbitrary;
use cid::Cid;
use fvm_ipld_bitfield::{BitField, UnvalidatedBitField};
use fvm_ipld_encoding::serde_bytes;
use fvm_shared::address::Address;
use serde_tuple::{Deserialize_tuple, Serialize_tuple};

#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
pub struct Payload {
    #[serde(with = "serde_bytes")]
    pub serde_bytes_bytes: Vec<u8>,
    pub integer: u64,
    pub address: Address,
    pub address_vec: Vec<Address>,
    pub bitfield: BitField,
    pub u_bitfield: UnvalidatedBitField,
    pub cid: Cid,
}

#[test]
fn encode_buf() {
    let cbor = [
        0x87, 0x42, 0xd4, 0x63, 0xc8, 0xce, 0xa9, 0x9b, 0x90, 0xcf, 0x18, 0x63, 0xd8, 0x2a, 0x4d,
        0x00, 0x01, 0xa9, 0x9b, 0x90, 0xcf, 0x18, 0x02, 0x63, 0xc8, 0xcf, 0x18, 0x02, 0x63, 0xc8,
        0x0e, 0xaf, 0xd8, 0x00, 0x00, 0xc8, 0x0e, 0xaf, 0xd8, 0x2a, 0x4d, 0x00, 0x01, 0x9d, 0x01,
        0xce, 0xa9, 0x9b, 0x02, 0x63, 0xc8, 0xaf, 0xd8, 0x2a, 0x00, 0x01, 0x9d, 0x01, 0xce, 0xa9,
        0x9b, 0x02, 0xc8,
    ];

    let payload: Payload = fvm_ipld_encoding::from_slice(&cbor).unwrap();
    let reencoded = fvm_ipld_encoding::to_vec(&payload).unwrap();
    assert_eq!(&cbor[..], reencoded);
}
